using UnityEngine;

/// <summary>
/// Used for the player, but could be used for enemies, etc. Using the Events generated by Sine effects, the following occurs:
/// <para>1. The "die" shudder effect on the SprytSingle plays (automatically)</para>
/// <para>2. We use the Event which fires when the shudder effect completes to Activate the fadeOut effect</para>
/// <para>3. We use the Event which fires when the fadeOut effect completes to destroy this GameObject</para>
/// </summary>
public class PlayerDeadHandler : MonoBehaviour
{
    /// <summary>A reference to the SprytSingle component on this instance</summary>
    public SprytSingle sSprite;

    /// <summary>Instead of using SineData which we have to new-up in OnEnable, we _could_ have declared a public Sine variable instead
    /// <para>However, by doing this, we can use the fade-out effect elsewhere in our project</para></summary>
    public SineData aFadeOut;

    /// <summary>Our own Sine effect which will be used to manipulate the Spryt's alpha</summary>
    private Sine fadeOut;

    private void OnEnable() {
//Each of the 5 Sine effects on every Spryt has an associated event you can tap into if it has a finite duration
        sSprite.sineX.OnEffectEnd += XSine_OnEffectEnd; //Subscribe to the Effect End Event generated by the xSine of SprytSingle
        fadeOut = new Sine(aFadeOut); //New up "fadeOut" instance based on the data provided in aFadeOut
        fadeOut.OnEffectEnd += FadeOut_OnEffectEnd; //Subscribe to its EffectEnd
    }

    private void OnDisable() {
//Unsubscribe from the Effect End Events; important to avoid memory leaks!!
        sSprite.sineX.OnEffectEnd -= XSine_OnEffectEnd;
        fadeOut.OnEffectEnd -= FadeOut_OnEffectEnd;
    }

    private void XSine_OnEffectEnd(object sender, System.EventArgs e) {
//Activate the fadeOut effect. Since our Alpha starts at 1 and goes to zero, we "maximize" the value of fadeOut instead of setting it to zero
        fadeOut.Activate(true);
    }

    private void FadeOut_OnEffectEnd(object sender, System.EventArgs e) {
//When the fade-out effect completes, destroy the gameObject
        Destroy(gameObject);
    }

    void Update() {
//Use fadeOut's Update to manipulate the Spryt's Alpha
        float _alpha; //This variable could be declared in-line, but to ensure compatibility with Unity v2017x, it is not
        if (fadeOut.Update(out _alpha)) //Update returns true only when the effect is active, we only want to change the alpha if the effect is active
            sSprite.Alpha = _alpha; //Only assign to the value of alpha if the Effect is Active
    }
}